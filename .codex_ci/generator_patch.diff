diff --git a/tests/feature_specs/hello_cli/conftest.py b/tests/feature_specs/hello_cli/conftest.py
new file mode 100644
--- /dev/null
+++ b/tests/feature_specs/hello_cli/conftest.py
@@ -0,0 +1,63 @@
+from __future__ import annotations
+
+import importlib.util
+import os
+import runpy
+import sys
+from pathlib import Path
+
+import pytest
+
+
+def _project_root() -> Path:
+    env_root = os.environ.get("ROOT")
+    if env_root:
+        candidate = Path(env_root).resolve()
+        if (candidate / "src").exists():
+            return candidate
+    here = Path(__file__).resolve()
+    for parent in (here,) + tuple(here.parents):
+        if (parent / "src").exists():
+            return parent
+    return Path.cwd().resolve()
+
+
+def _import_from_src(pkg: str):
+    root = _project_root()
+    module_file = root / "src" / pkg / "__init__.py"
+    if not module_file.exists():
+        raise FileNotFoundError(f"{module_file} not found")
+    spec = importlib.util.spec_from_file_location(pkg, str(module_file))
+    module = importlib.util.module_from_spec(spec)
+    assert spec and spec.loader  # type: ignore[truthy-bool]
+    spec.loader.exec_module(module)  # type: ignore[attr-defined]
+    return module
+
+
+@pytest.fixture(scope="session")
+def hello():
+    return _import_from_src("hello")
+
+
+@pytest.fixture
+def run_app():
+    root = _project_root()
+
+    def _run(*args: str) -> None:
+        argv = ["hello", *args]
+        original_argv = sys.argv[:]
+        original_path = list(sys.path)
+        source_path = root / "src"
+        if str(source_path) not in sys.path:
+            sys.path.insert(0, str(source_path))
+        sys.argv = argv
+        try:
+            runpy.run_module("hello", run_name="__main__")
+        except SystemExit as exc:  # mimic CLI invocation
+            if exc.code not in (0, None):
+                raise
+        finally:
+            sys.argv = original_argv
+            sys.path[:] = original_path
+
+    return _run

diff --git a/tests/feature_specs/hello_cli/test_cli.py b/tests/feature_specs/hello_cli/test_cli.py
new file mode 100644
--- /dev/null
+++ b/tests/feature_specs/hello_cli/test_cli.py
@@ -0,0 +1,41 @@
+from __future__ import annotations
+
+import pytest
+
+
+def test_default_greeting(run_app, capsys):
+    '''AC#1 Run with default arguments and print `Hello World`.'''
+
+    run_app()
+    captured = capsys.readouterr()
+    assert captured.out == "Hello World\n"
+    assert captured.err == ""
+
+
+def test_message_override(run_app, capsys):
+    '''AC#2 Accept `--message` to override the greeting text.'''
+
+    run_app("--message", "Hi there")
+    captured = capsys.readouterr()
+    assert captured.out == "Hi there\n"
+    assert captured.err == ""
+
+
+@pytest.mark.parametrize("repeat", [2, 3])
+def test_repeat_behavior(run_app, capsys, repeat):
+    '''AC#2 Accept `--repeat` to control repetition.'''
+
+    run_app("--repeat", str(repeat))
+    captured = capsys.readouterr()
+    expected = ("Hello World\n" * repeat)
+    assert captured.out == expected
+    assert captured.err == ""
+
+
+def test_quiet_mode_suppresses_output(run_app, capsys):
+    '''AC#3 Support `--quiet` to suppress output entirely.'''
+
+    run_app("--message", "Muted", "--quiet")
+    captured = capsys.readouterr()
+    assert captured.out == ""
+    assert captured.err == ""
