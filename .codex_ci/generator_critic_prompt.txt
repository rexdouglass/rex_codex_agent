You are reviewing pytest specs that were just generated for the following Feature Card.
Decide whether the tests fully capture the acceptance criteria and obvious negative cases.
Respond in ONE of two ways:
1. `DONE` (exact uppercase word) if coverage is sufficient.
2. `TODO:` followed by bullet items describing additional scenarios to cover.
Do NOT provide code; only guidance.

--- GENERATOR PASS ---
1

Feature slug: readme

--- FEATURE CARD ---
# Feature Cards

Feature Cards describe upcoming Python work before implementation. Cards live beside this README and are consumed by the **Codex generator** to produce deterministic pytest specs. Keep them concise and machine-friendly.

## Required structure

```markdown
status: proposed   # required, on its own line (values: proposed|accepted|retired)
title: Concise summary
owner: optional-handle

## Summary
- short bullets describing the behaviour

## Acceptance Criteria
- deterministic checks a reviewer can run manually

## Links
<!-- generator may append references here -->

## Spec Trace
<!-- generator may append references here -->
```

### Guidelines
- Always start with `status: proposed`. The generator will ignore cards without this exact line.
- Use bullets for Summary/Acceptance Criteria-Codex reads them into prompts verbatim.
- Leave `## Links` / `## Spec Trace` blank; the generator appends context there.
- Prefer deterministic acceptance criteria (no external network calls, no "eventually" language).
- Populate optional metadata (`id`, `epic`, `risk_level`, `priority`, `owner`, `dependencies`) when known-the generator canonicalises these fields and mirrors them into the assumption ledger.
- Capture explicit assumptions under an `## Assumptions` heading or inline using `A-###:` prefixes; unresolved ambiguity is turned into assumption ledger entries automatically.

## Day-one flow (per feature)

1. **Draft the card** following the template above (or run `./rex-codex card new` for an interactive scaffold).
2. **Generate specs**
   ```bash
   ./rex-codex generator documents/feature_cards/<slug>.md
   ```
   The generator will:
   - Create/update only `tests/feature_specs/<slug>/...` (pytest files).
   - Append references under `## Links` / `## Spec Trace`.
   - Reject non-deterministic tests (network, `time.sleep`, `uuid.uuid4`, `secrets`, unseeded randomness, etc.).
   - Enforce patch-size limits (default 6 files / 300 lines).
3. **Implement runtime code** under `src/...` (Python only) until the discriminator ladder is green.
4. **Promote the card** to `status: accepted` once the discriminator passes; commit the change alongside your runtime code.

> This project focuses exclusively on **Python projects running on Linux** with OpenAI Codex as the LLM backend. Cards should not describe non-Python or cross-platform work unless you can satisfy it within those bounds.


--- CURRENT TEST FILES ---
### /media/skynet3/8tb_a1/rex_codex_agent/tests/feature_specs/readme/conftest.py
from __future__ import annotations

import importlib.util
import os
import runpy
import sys
from pathlib import Path

import pytest


def _project_root() -> Path:
    env_root = os.environ.get("ROOT")
    if env_root:
        candidate = Path(env_root).resolve()
        if (candidate / "src").exists():
            return candidate
    here = Path(__file__).resolve()
    for parent in (here,) + tuple(here.parents):
        if (parent / "src").exists():
            return parent
    return Path.cwd().resolve()


def _import_from_src(pkg: str):
    root = _project_root()
    module_file = root / "src" / pkg / "__init__.py"
    if not module_file.exists():
        raise FileNotFoundError(f"{module_file} not found")
    spec = importlib.util.spec_from_file_location(pkg, str(module_file))
    module = importlib.util.module_from_spec(spec)
    assert spec and spec.loader  # type: ignore[truthy-bool]
    spec.loader.exec_module(module)  # type: ignore[attr-defined]
    return module


@pytest.fixture(scope="session")
def hello():
    return _import_from_src("hello")


@pytest.fixture
def run_app():
    root = _project_root()

    def _run(*args: str) -> None:
        argv = ["hello", *args]
        original_argv = sys.argv[:]
        original_path = list(sys.path)
        source_path = root / "src"
        if str(source_path) not in sys.path:
            sys.path.insert(0, str(source_path))
        sys.argv = argv
        try:
            runpy.run_module("hello", run_name="__main__")
        except SystemExit as exc:  # mimic CLI invocation
            if exc.code not in (0, None):
                raise
        finally:
            sys.argv = original_argv
            sys.path[:] = original_path

    return _run


### /media/skynet3/8tb_a1/rex_codex_agent/tests/feature_specs/readme/test_feature.py
from __future__ import annotations


def test_feature_imports(hello):
    assert hasattr(hello, "main")

--- END TEST FILES ---
--- MOST RECENT DISCRIMINATOR LOG (tail) ---
                    **llm_event_context,
                      ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/discriminator.py:295: error: Argument 7 to
"emit_event" has incompatible type "**dict[str, int | str | None]"; expected
"str | None"  [arg-type]
                    **llm_event_context,
                      ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/discriminator.py:309: error: Argument 5 to
"emit_event" has incompatible type "**dict[str, int | str | None]"; expected
"str | None"  [arg-type]
                    **llm_event_context,
                      ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/discriminator.py:329: error: Argument 7 to
"emit_event" has incompatible type "**dict[str, int | str | None]"; expected
"str | None"  [arg-type]
                **llm_event_context,
                  ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/discriminator.py:341: error: Returning Any from
function declared to return "str | None"  [no-any-return]
            return slug
            ^~~~~~~~~~~
src/rex_codex/scope_project/discriminator.py:948: error: Unused "type: ignore"
comment  [unused-ignore]
            key = record["group"]  # type: ignore[index]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/discriminator.py:949: error: Argument 1 to
"setdefault" of "OrderedDict" has incompatible type "object"; expected "str" 
[arg-type]
            grouped.setdefault(key, []).append(record)
                               ^~~
src/rex_codex/scope_project/discriminator.py:961: error: Argument 1 to "float"
has incompatible type "object"; expected
"str | Buffer | SupportsFloat | SupportsIndex"  [arg-type]
                elapsed = float(record["elapsed"])
                                ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:58: error: Returning Any from function
declared to return "str | None"  [no-any-return]
        return hashes.get(slug)
        ^~~~~~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:89: error: Returning Any from function
declared to return "dict[str, object]"  [no-any-return]
            return json.loads(path.read_text(encoding="utf-8"))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:204: error: Argument "extra_sections" to
"create_audit_snapshot" has incompatible type
"list[tuple[str, list[str]]] | None"; expected
"list[tuple[str, Sequence[str]]] | None"  [arg-type]
            create_audit_snapshot(context, extra_sections=extra)
                                                          ^~~~~
src/rex_codex/scope_project/loop.py:358: error: Dict entry 0 has incompatible
type "str": "str"; expected "str": "int | None"  [dict-item]
                                    "slug": card.slug,
                                    ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:368: error: Dict entry 0 has incompatible
type "str": "str"; expected "str": "int | None"  [dict-item]
                        {"slug": card.slug, "generator": result, "discrimi...
                         ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:394: error: Dict entry 0 has incompatible
type "str": "str"; expected "str": "int | None"  [dict-item]
                                    "slug": card.slug,
                                    ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:408: error: Dict entry 0 has incompatible
type "str": "str"; expected "str": "int | None"  [dict-item]
                    "slug": card.slug,
                    ^~~~~~~~~~~~~~~~~
src/rex_codex/scope_project/loop.py:484: error: Incompatible types in
assignment (expression has type "int | None", variable has type "int") 
[assignment]
            exit_code = generator_code if generator_code not in (None, 0, ...
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/rex_codex/scope_project/loop.py:531: error: Returning Any from function
declared to return "str | None"  [no-any-return]
            return slug
            ^~~~~~~~~~~
src/rex_codex/scope_global/cli.py:494: error: Incompatible types in assignment
(expression has type "DiscriminatorOptions", variable has type
"GeneratorOptions")  [assignment]
            options = DiscriminatorOptions()
                      ^~~~~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:496: error: "GeneratorOptions" has no
attribute "mode"  [attr-defined]
                options.mode = "feature"
                ^~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:498: error: "GeneratorOptions" has no
attribute "mode"  [attr-defined]
                options.mode = "global"
                ^~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:504: error: "GeneratorOptions" has no
attribute "slug"  [attr-defined]
                options.slug = args.feature_slug
                ^~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:506: error: "GeneratorOptions" has no
attribute "disable_llm"  [attr-defined]
                options.disable_llm = False
                ^~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:508: error: "GeneratorOptions" has no
attribute "disable_llm"  [attr-defined]
                options.disable_llm = True
                ^~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:513: error: "GeneratorOptions" has no
attribute "stage_timeout"  [attr-defined]
                options.stage_timeout = args.stage_timeout
                ^~~~~~~~~~~~~~~~~~~~~
src/rex_codex/scope_global/cli.py:514: error: Argument 1 to "run_discriminator"
has incompatible type "GeneratorOptions"; expected "DiscriminatorOptions" 
[arg-type]
            exit_code = run_discriminator(options, context=context)
                                          ^~~~~~~
src/rex_codex/scope_global/cli.py:589: error: Incompatible types in assignment
(expression has type "list[str] | None", variable has type "list[str]") 
[assignment]
                statuses = parse_statuses(args.statuses) if args.statuses ...
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/rex_codex/scope_global/cli.py:658: error: Skipping analyzing
"rex_codex.scope_global.hud": module is installed, but missing library stubs or
py.typed marker  [import-untyped]
            from .hud import render_hud
    ^
src/rex_codex/scope_global/cli.py:658: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
Found 86 errors in 17 files (checked 54 source files)
