"""Release checklist orchestration for rex-codex."""

from __future__ import annotations

from datetime import UTC, datetime
from pathlib import Path
from typing import Iterable

from .utils import RexContext, ensure_dir


def _read_version(path: Path) -> str:
    try:
        return path.read_text(encoding="utf-8").strip()
    except OSError:
        return "0.0.0"


def _bump_patch(version: str) -> str:
    parts = version.split('.')
    while len(parts) < 3:
        parts.append('0')
    try:
        patch = int(parts[-1]) + 1
    except ValueError:
        return version
    return '.'.join([*parts[:-1], str(patch)])


def _format_steps(steps: Iterable[str]) -> str:
    lines = ["## Release Checklist", ""]
    for idx, step in enumerate(steps, start=1):
        lines.append(f"{idx}. {step}")
    lines.append("")
    lines.append("Generated by ./rex-codex release")
    return "\n".join(lines)


def run_release(
    *,
    context: RexContext | None = None,
    target_version: str | None = None,
    dry_run: bool = False,
) -> int:
    """Emit a guided checklist for preparing a release."""

    context = context or RexContext.discover()
    version_path = context.root / "VERSION"
    current_version = _read_version(version_path)
    proposed_version = target_version or _bump_patch(current_version)

    steps = [
        "Ensure the working tree is clean and synced with the main branch.",
        "Run `scripts/selftest_loop.sh` to exercise the hello_greet/hello_cli smoke tests.",
        "Run `scripts/smoke_e2e.sh --dry-run` to validate install + loop orchestration in a fresh workspace.",
        "Run `./rex-codex loop --feature-only --global` and confirm both phases pass.",
        f"Update `VERSION` to `{proposed_version}` and mirror the change in `pyproject.toml` if published to PyPI.",
        "Capture notable changes in `CHANGELOG.md` (or project release notes).",
        "Regenerate docs: `./rex-codex card list`, update AGENTS.md/README.md as needed.",
        "Build artefacts: `python -m build` followed by `twine check dist/*`.",
        "Run `pytest` with coverage to confirm the suite stays green.",
        "Review `for_external_GPT5_pro_audit/` snapshots for the latest audit trace.",
        "Commit with `release: prepare v{}` and tag `v{}`.".format(proposed_version, proposed_version),
        "Push commits and tags, then publish artefacts (`twine upload` or container push).",
    ]

    print("=== rex-codex release checklist ===")
    print(f"Current VERSION: {current_version or 'unknown'}")
    print(f"Target VERSION:  {proposed_version}")
    print("\nRecommended steps:")
    for idx, step in enumerate(steps, start=1):
        print(f"  {idx}. {step}")

    if dry_run:
        print("\n[dry-run] Skipping plan file generation.")
        return 0

    plan_dir = ensure_dir(context.root / "documents" / "release_plan")
    timestamp = datetime.now(UTC).strftime("%Y%m%dT%H%M%SZ")
    plan_path = plan_dir / f"release_{proposed_version}_{timestamp}.md"
    plan_path.write_text(_format_steps(steps), encoding="utf-8")
    print(f"\n[release] Checklist saved to {context.relative(plan_path)}")
    return 0


__all__ = ["run_release"]
